#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (C) 2011 Romain Gauthier <romain.gauthier@masteri2l.org>
# Copyright (C) 2011 Laurent Peuch <cortex@worlddomination.be>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Import from the standard library
from argparse import ArgumentParser
from logging import error
from signal import signal, SIGINT
from sys import stdout

# Import from jsontail
from jsontail import __version__, feedGenerator, FeedKeyError
from jsontail.config import Config
from time import sleep

import importlib

def stop(signum, frame):
    exit(0)


signal(SIGINT, stop)

def writeEntries(entries):
    for entry in entries:
        stdout.write(entry)
        stdout.write("\n")
        stdout.flush()

if __name__ == '__main__':
    config = Config()
    parser = ArgumentParser('jsontail')
    version = '%(prog)s' + ' v%s, (C) 2011 by romain.gauthier@masteri2l.org' % __version__
    # Standards rsstail parameters
    parser.add_argument('-u', '--url', help='URL of feed to tail')

    parser.add_argument('-i', '--interval', type=int, default=900,
                        help='check interval in seconds (default is 15min)')
    parser.add_argument('-1', '--oneshot', action='store_true', help='one shot')
    parser.add_argument('-V', '--version', action='version', version=version, help='show version and exit')

    # Non standards rsstail parameters
    parser.add_argument('-f', '--format', help='define your output format')
    parser.add_argument('-o', '--output', help='hook for processing output')
    parser.add_argument('-k', '--key', default='id',
                        help='use KEY to find new entries')
    parser.add_argument('-r', '--reverse', action='store_true',
                        help='reverse the displaying order of the elements')
    parser.add_argument('-n', '--number', type=int,
                        help='number of items to show initialy')
    parser.add_argument('-K', '--ignore-key-error', action='store_true',
                        help='don\'t stop if a key error is encountered')
    parser.add_argument('-e', '--no-endl', action='store_true',
                        help='remove carriage return')
    parser.add_argument('-c', '--cache',
                        help='file to store most recent posts')

    options = parser.parse_args()

    config.interval = options.interval
    config.oneshot = options.oneshot

    if options.format:
        m = importlib.import_module(options.format)
        config.formatFct = m.format_json

    config.key = options.key
    config.reverse = options.reverse
    config.number = options.number

    config.ignore_key_error = options.ignore_key_error
    config.no_endl = options.no_endl

    if options.output:
        m = importlib.import_module(options.output)
        if options.cache:
            output_hook = lambda e: m.output_entries(e, options.cache)
        else:
            output_hook = m.output_entries
    else:
        output_hook = writeEntries

    if options.url:
        config.url = options.url
        try:
            gen = feedGenerator(config)
            output_hook(gen.next())
            while not config.oneshot:
                 sleep(config.interval)
                 output_hook(gen.next())

        except FeedKeyError, key:
            error('The %s property is not available for this feed.' % key)
            exit(1)
    else:
        parser.print_help()
        exit(0)
